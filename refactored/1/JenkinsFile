// Jenkinsfile
pipeline {
    agent {label 'docker-enabled-agent'} // Specifies that the pipeline can run on any available agent

    parameters {
        // Defines a boolean parameter 'RC' (Release Candidate)
        booleanParam(
            name: 'RC',
            defaultValue: false, // Default value is unchecked (false)
            description: 'Is this a Release Candidate build?'
        )
    }

    // Global environment variables for the entire pipeline
    environment {
        VERSION = '0.1.0' // Corrected comma to a dot for version number
        VERSION_RC = 'rc.2' // Suffix for Release Candidate builds
    }

    stages {
        stage('Audit tools') {
            steps {
                echo 'Checking installed tool versions...'
                sh '''
                    git version
                    docker version
                    dotnet --list-sdks
                    dotnet --list-runtimes
                '''
            }
        }

        stage('Build') {
            // Environment variables specific to the 'Build' stage
            environment {
                VERSION_SUFFIX = "${sh(script: """
                    if [ "${params.RC}" == "false" ] ; then
                        echo "${env.VERSION_RC}+${env.BUILD_NUMBER}"
                    else
                        echo "${env.VERSION_RC}"
                    fi
                """, returnStdout: true)}"
                }
            steps {
                echo "Building version: ${VERSION} with suffix: ${VERSION_SUFFIX}"
                // Corrected the multi-line sh command and path
                sh 'pwd'
                sh 'dotnet build -p:VersionPrefix="${VERSION}" --version-suffix "${VERSION_SUFFIX}" ./refactored/src/Pi.Web/Pi.Web.csproj'
            }
        }

        stage('Unit Test') {
            steps {
                sh 'pwd'
                // Changes the working directory for the commands within this block
                dir('./src') {
                    sh '''
                        pwd
                        # Run tests for Pi.Math.Tests project
                        dotnet test --logger "trx;LogFileName=Pi.Math.trx" Pi.Math.Tests/Pi.Math.Tests.csproj
                        # Run tests for Pi.Runtime.Tests project (corrected potential typo)
                        dotnet test --logger "trx;LogFileName=Pi.Runtime.trx" Pi.Runtime.Tests/Pi.Runtime.Tests.csproj
                    '''
                    // Publishes the TRX test results to Jenkins UI
                    mstest testResultsFile:"**/*.trx", keepLongStdio: true
                }
            }
        }

        stage('Smoke Test') {
            steps {
                echo 'Running smoke tests...'
                sh 'dotnet ./refactored/src/Pi.Web/bin/Debug/netcoreapp3.1/Pi.Web.dll'
            }
        }

        stage('Publish') {
            // This stage will only run if the 'RC' parameter is checked (true)
            when {
                expression {
                    // 'returns' is not a keyword. Use 'return' to specify the boolean result.
                    // params.RC is already a boolean, so directly returning it works.
                    return params.RC
                }
            }
            steps {
                echo "Publishing application for Release Candidate..."
                // Corrected missing quotes and curly brace in --version-suffix
                // Corrected path for .csproj and output directory
                sh "dotnet publish -p:VersionPrefix=\"${VERSION}\" --version-suffix \"${VERSION_RC}\" ./refactored/src/Pi.Web/Pi.Web.csproj -o ./out"
                // Archives the 'out' directory as a build artifact
                archiveArtifacts('out/')
            }
        }
    }

    // Post-build actions, executed after all stages are attempted
    post {
        always {
            echo "Always is executed regardless of whatever happens."
        }
        failure {
            echo "Pipeline failed!"
        }
        success {
            echo "Pipeline succeeded!"
        }
    }
}